// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: file.sql

package db

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (
    user_id,
    file_name
) VALUES (
    $1, $2
)
RETURNING id, user_id, file_name, created_at
`

type CreateFileParams struct {
	UserID   string
	FileName string
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile, arg.UserID, arg.FileName)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}

const getFile = `-- name: GetFile :one
SELECT id, user_id, file_name, created_at FROM files
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, id int64) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, user_id, file_name, created_at FROM files
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEntriesParams struct {
	UserID string
	Limit  int32
	Offset int32
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
